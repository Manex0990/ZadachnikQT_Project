Мой проект: Математический задачник.
Я реализовал приложение, в котором можно решать задания.
Они проверяются тестировщиком. И за правильные решения начисляется рейтинг.

Сначала поговорим о структуре приложения со стороны пользователя.
После запуска первым делом открывает главное меню, где представлено краткое описание приложения, 2 группы кнопок и табло с рейтингом.
1 группа - тренировочные задания. 2 группа - тренировочные тесты.
При нажатии на первые 2 кнопки из 1 группы сразу откроется окно, где находится инструкция по решению, само задание, кнопка ответа, выхода, поле ответа и строки для вердикта.
А при нажатии на все остальные кнопки 1 группы сначала откроется окно с выбором сложности(легкий, средний, сложный), и только потом откроется окно, где сгенерируется задание с учетом выбранной сложности(+инструкция, кнопки ответа, выхода, строки вердикта и поле ответа).
При нажатии на любую кнопку из 2 группы сначала открывается вступительное окно теста с инструкцией, кнопки запуска теста и выхода в меню.
Если нажать на кнопку запуска, то откроется окно с QTabWidget, где будут вкладки с разными заданиями, реализованные обьектами класса, реализующего окна тренировочных заданий, ниже кнопка завершения теста.
Табло рейтинга отображает текущий рейтинг пользователя. Обновляется каждый раз при открытии окна главного меню.

А теперь поговорим о структуре кода приложения.
Приложение выполнено на основе языка программирования Python 3.12 с использованием невстроенной библиотеки PyQt6.
Интерфейс выполнен с помощью QtDesigner. Также приложение работает с БД sqlite3.

Код проекта разделен на 2 файла.
1 файл содержит класс MyMath, который выполняет функции генерации заданий(методы generate), нахождение прального ответа на задания(методы answer) и проверки ответа пользователя(методы check_answer).
Для корректной работы основных методов есть вспомогательные:
1) Метод iddentificate_task определяет тип примера и его сложность, опираясь на его строковое представление.
2) Методы search_coofs_stage_1_2(3) определяет коэффициенты примеров 1 и 2 (3) уровня сложности, опираясь на его строковое представление.

2 файл работает с пользователем: реализует окна QMainWindow(классы Menu, Task, ChangeLevel, Opan_test, Test), функции кнопок(методы классов), вывод заданий, сгенерированных в 1 файле на экран.
Класс Menu содержит код, реализующий окно главного меню, где есть:
1) Краткое описание проекта в QLabel виджетах.
2) 2 Группы кнопок QPushButton, генерирующие задания и тесты.
3) Табло рейтинга QLCDNumber виджет.

Класс Task содержит код, реализующий окна заданий, где есть:
1) Инструкция по выполнению задания в QLabel виджетах.
2) Поле ответа QLineEdit
3) Задание выводится в QLabel, генерируется в одном из методов generate класса MyMath.
4) Кнопка ответа QPushButton проверяет ответ пользователя, с помощью одного из методов check_answer класса MyMath.
5) Строки с вердиктами QLabel.
6) Кнопка выхода QPushButton.
7) StatusBar, отображающий ошибки.
А также класс отвечает за изменение рейтинга и работу с БД.

Класс Test содержит код, реализующий окно решения тестов, где есть:
1) QTabWidget, где находится 6 или 10 вкладок, взависимости от типа теста, в каждой вкладке находится окно с заданием, реализованное при помощи класса Task.
2) Кнопка выхода QPushButton.

Класс Opentest содержит код, реализующий инструкционное окно тестов, где есть:
1) Инструкцию выполнения теста в Qlabel виджетах.
2) Кнопка запуска и кнопка выхода QPushButton.

Класс Change_level содержит код, реализующий окно выбора сложности примера, где есть:
3 кнопки QRadioButton, при нажатии на которые открывается окно решения примера соответствующей сложности, реализуемое классом Task.

Все классы работают взаимосвязанно между собой и с классом MyMath из 1 файла.

Рассмотрим конкретный пример работы приложения.
1) Пользователь запускает приложение(окно главного меню - Menu, класс 2 файла)
2) Нажимает кнопку из 1 группы - Квадратное уравнение.(окно задания - Task, класс 2 файла)
3) В открывшемся окне показывается квадратное уравнение, которой необходимо решить(сгенерировано в generate_square_x класса MyMath 1 файла)
4) Программа решает данное уравнение(в метод answer_square_x класса MyMath 1 файла передается уравнение в виде аргумента и решается)
5) Пользователь решает уравнение, вводит ответ, нажимает кнопку ответа и задание проверятся(ответ пользователя передается в класс MyMath в метод check_answer_square_x в виде аргумента и ответ сравнивается с правильным,
который находится при помощи метода answer_square_x класса MyMath 1 файла.)
6) Если ответ пользователя верный, то в строке вердикта выведится сообщение с поздравлением и рейтинг увеличится(при помощи метода edit_rating класса Task 2 файла).
   Иначе строка вердикта выведет сообщение о неверности ответа и рейтинг не изменится.
   Пользователь может проверить расчеты и ответить снова или выйти в главное меню с помощью кнопки выхода(с помощью метода exit класса Task 2 файла).
Остальные задания реализуются анологичным образом.
На этом примере наглядно видна взаимосвязанность работы всех составных частей и файлов приложения.

Поговорим об исключениях:
В каждом окне задания есть инструкция по вводу ответа, но на случай если пользователь введет ответ не соответствующий этим правилам, предусмотрена защита от ошибок.
Если введен некоректный ответ, то в виджете statusBar выводится сообщение о некоректности ответа, но ответ все равно принимается и проверяется.
Очевидно, что ответ в таком случае неверный, но зато не возникает ошибки в коде приложения, а пользователь всегда может изменить ответ.

Поговорим о базе данных.
Разбалловка заданий и рейтинг пользователя хранится в базе данных в 2 таблицах.
В 1 таблице находится рейтинг пользователя, а во 2 разбалловки.
Каждый раз при обновлении рейтинга сначала открывает 2 таблица оттуда берется балл за соответсвующее решенное задание и прибавляется к общему рейтингу в 1 таблице.

В приложении есть картинки на заднем фоне, реализованные с помощью PyQt6.
