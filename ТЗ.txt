Язык проектирования: Python 3.12
Базы данных: sqlite3
Проектирование приложения и работа с виджетами: PyQt6
Использованные технологии PyQt6: QMainWidget, QApplication, QPushButton, QLabel, QRadioButton, QLineEdit, QLCDNumber, возможно(QListWidget).

Все функции приложения будут осуществляться при помощи класса MyMath из файла project.py.
Он будет импортирован в файл project_qt.py и будет выполнять соответсвующие нажатию кнопок пользователем функции.

Состав и функции файла project_qt.py:

Он будет состоять из нескольких классов:
Самый главный класс - Menu
Здесь находится краткая информация о приложении, кнопка просмотра рейтинга get_rating_btn и кнопки запуска решения заданий:
square_x_btn, line_x_btn, sum_btn, min_btn, mul_btn, crop_btn - тренировочные задания.
easy_test_btn, hard_test_btn - тренировочные тесты.
Они будут запускать соответствующие класс, реализующий окна тренировочных заданий или тренировочных тестов.
В каждом окне для решения будет поле для ответа(ответов) и кнопка проверки решения, при помощи методов класса MyMath.
Правильный(ые) ответ(ответы) будет(ут) показан(ы) в этих же окнах, потом пользователь может вернуться в главное меню, с помощью кнопки выхода exit_btn.

Состав и функции файла project.py:

Условные обозначения класса MyMath:
square_x - квадратное уравнение
line_x - линейное уравнение
sum_stage_1 - легкий пример на сложение
sum_stage_2 - средний пример на сложение
sum_stage_3 - сложный пример на сложение
min_stage_1 - легкий пример на вычитание
min_stage_2 - средний пример на вычитание
min_stage_3 - сложный пример на вычитание
mul_stage_1 - легкий пример на умножение
mul_stage_2 - средний пример на умножение
mul_stage_3 - сложный пример на умножение
crop_stage_1 - легкий пример на деление
crop_stage_2 - средний пример на деление
crop_stage_3 - сложный пример на деление

Названия методов, работающих с тренировочными заданиями строятся по типу: функция - условное обозначение задания.
1) Методы, названия которых, начинаются со слова generate(функция) отвечают за генерацию задания, соответствующего условному обозначению(перечислены выше).
2) Методы, названия которых, начинаются со слова answer(функция) нужны, чтобы вычислить верный ответ на данное ему в качестве аргумента задания, соответствующего условному обозначению(перечислены выше).
3) Методы, названия которых, начинаются со слова check_answer(функция) отвечают за проверку правильности ответа пользователя на заданное задание, соответствующего условному обозначению(перечислены выше).
4) Метод edit_rating_tasks отвечает за обновление рейтинга за решение тренировочных заданий.

Названия методов, работающих с тренировочными тестами:
1) Метод create_easy_test генерирует задания для легкого теста.
2) Метод create_hard_test генерирует задания для сложного теста.
3) Метод answer_easy_test вычисляет верные ответы на задания из легкого теста.
4) Метод answer_hard_test вычисляет верные ответы на задания из сложного теста.
Проверка ответов пользователя и обновление рейтинга будет производиться в project_qt.py в классе EasyTestTask или HardTestTask, в зависимости от решаемого теста.
